service: batch-upload
variablesResolutionMode: 20210326
custom:
  variablesResolutionMode: 20210326
  region: ${opt:region,'us-east-1'}
  stage: ${opt:stage, 'dev'}

  stages:
    - offline
    - local
    - dev
    - prod

  prune:
    automatic: true
    includeLayers: true
    number: 3

  pythonRequirements:
    usePoetry: true

  keyValueTags:
    - Key: "product"
      Value: "data"
    - Key: "env"
      Value: "${self:custom.stage}"
    - Key: "app"
      Value: "client_uploads"
    - Key: "sb_managed_by"
      Value: "serverless"
    - Key: "sb_repo"
      Value: ${git:repository}
    - Key: "git_hash"
      Value: ${git:sha1}
    - Key: "git_branch"
      Value: ${git:branch}

  standardTags:
    product: data
    env: ${self:custom.stage}
    app: client_uploads
    sb_managed_by: serverless
    sb_repo: ${git:repository}
    git_hash: ${git:sha1}
    git_branch: ${git:branch}

  s3:
    host: localhost
    directory: ./tests/fixtures/s3/

  localstack:
    stages:
      - local
    host: http://0.0.0.0 # For localstack docker-compose up
    edgePort: 4566
    region: us-east-1
    debug: true

package:
  individually: false
  exclude:
    - tests/**
    - venv/**
    - .serverless/**
    - node_modules/**
    - .idea/**
    - package*

provider:
  deploymentBucket:
    name: deployment-bucket-39
    # name: deployment-test-bucket-new
    blockPublicAccess: true
    serverSideEncryption: AES256
  variablesResolutionMode: 20210326
  name: aws
  runtime: python3.8
  region: ${opt:region,'us-east-1'}
  stage: ${opt:stage, 'local'}
  logRetentionInDays: 14
  tags: ${self:custom.standardTags}
  stackTags: ${self:custom.standardTags}

  # vpc:
  #   securityGroupIds:
  #     - "sg-00dc46bc1876d0fe9"
  #   subnetIds:
  #     - "subnet-05ae6600909c50e66"
  #     - "subnet-03e3c69c9df8e8633"
  #     - "subnet-03c6599332b94c8d9" #(scanbuydata-prod-data-private-us-east-1b)
 
  iamRoleStatements:
    - Effect: Allow
      Action: # S3 permissions.
        - "s3:*"
      Resource:
        - "*" # TODO: Add the S3 src bucket
    - Effect: Allow
      Action: # ec2 permissions.
        - "ec2:CreateNetworkInterface"
      Resource:
        - "*" # TODO: Add the ec2 permissions.
    - Effect: Allow # StepFunctions permissions.
      Action:
        - states:SendTaskFailure
        - states:SendTaskSuccess
      Resource:
        - "arn:aws:states:${aws:region}:${aws:accountId}:states:SendTaskSuccess"
        - "arn:aws:states:${aws:region}:${aws:accountId}:states:SendTaskFailure"
        - Ref: ProdDashinmarketDashuploadDashpipeline
        # - Ref: ProdDashnearDashuploadDashpipeline
        # - Ref: ProdDashplaceiqDashuploadDashpipeline
        # - Ref: ProdDashrevealmobileDashuploadDashpipeline
        # - Ref: ProdDashsafegraphDashuploadDashpipeline
        # - Ref: ProdDashtwinedataDashuploadDashpipeline
        # - Ref: ProdDashunacastDashuploadDashpipeline
        # - Ref: ProdDashechoDashuploadDashpipeline
        # - Ref: ProdDashonspotDashuploadDashpipeline
        # - Ref: ProdDashweatherbugDashuploadDashpipeline

 

    # Shared Across Functions

  batch:
    Type: FARGATE_SPOT # [ EC2 | SPOT | FARGATE ] # Required
    SecurityGroupIds: # Required
      - "sg-00dc46bc1876d0fe9"
    Subnets: # Required
      - "subnet-05ae6600909c50e66"
      - "subnet-03e3c69c9df8e8633"
      - "subnet-03c6599332b94c8d9"
    MaxvCpus: 500 # Optional. Default 2

plugins:
  - serverless-stage-manager
  - serverless-prune-plugin
  - serverless-python-requirements
  - serverless-localstack
  - serverless-plugin-common-excludes
  - serverless-s3-local
  # - serverless-offline
  - serverless-aws-batch
  - serverless-step-functions
  - serverless-plugin-git-variables
  - serverless-iam-roles-per-function

functions:
  inmarketUpload:
    handler: handler.hello
    timeout: 900
    iamRoleStatements:
      - Effect: Allow
        Action: # S3 permissions.
          - "s3:*"
        Resource:
          - "*" # TODO: Add the S3 src bucket
      - Effect: Allow
        Action: # ec2 permissions.
          - "ec2:CreateNetworkInterface"
        Resource:
          - "*" # TODO: Add the ec2 permissions.
    batch:
      ContainerProperties:
        ExecutionRoleArn: "arn:aws:iam::${aws:accountId}:role/ecsTaskExecutionRole"
        ResourceRequirements:
          - Type: MEMORY
            Value: 2048
          - Type: VCPU
            Value: 1
      Timeout:
        AttemptDurationSeconds: 21600


stepFunctions: ${file(./definitions/stepfunctions.js)}